/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getCardinalsAccess().getAlternatives(), "rule__Cardinals__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProgramAccess().getGroup_2(), "rule__Program__Group_2__0");
					put(grammarAccess.getProgramAccess().getGroup_3(), "rule__Program__Group_3__0");
					put(grammarAccess.getProgramAccess().getGroup_4(), "rule__Program__Group_4__0");
					put(grammarAccess.getProgramAccess().getGroup_5(), "rule__Program__Group_5__0");
					put(grammarAccess.getProgramAccess().getGroup_8(), "rule__Program__Group_8__0");
					put(grammarAccess.getProgramAccess().getGroup_8_3(), "rule__Program__Group_8_3__0");
					put(grammarAccess.getProgramAccess().getGroup_9(), "rule__Program__Group_9__0");
					put(grammarAccess.getProgramAccess().getGroup_9_3(), "rule__Program__Group_9_3__0");
					put(grammarAccess.getProgramAccess().getGroup_10(), "rule__Program__Group_10__0");
					put(grammarAccess.getProgramAccess().getGroup_10_3(), "rule__Program__Group_10_3__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_4(), "rule__Variable__Group_4__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getLineAccess().getGroup_3(), "rule__Line__Group_3__0");
					put(grammarAccess.getLineAccess().getGroup_4(), "rule__Line__Group_4__0");
					put(grammarAccess.getLineAccess().getGroup_5(), "rule__Line__Group_5__0");
					put(grammarAccess.getLineAccess().getGroup_6(), "rule__Line__Group_6__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getBlockAccess().getGroup_3(), "rule__Block__Group_3__0");
					put(grammarAccess.getBlockAccess().getGroup_3_3(), "rule__Block__Group_3_3__0");
					put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
					put(grammarAccess.getIfStmtAccess().getGroup_4(), "rule__IfStmt__Group_4__0");
					put(grammarAccess.getVariableAffectAccess().getGroup(), "rule__VariableAffect__Group__0");
					put(grammarAccess.getCallMethodAccess().getGroup(), "rule__CallMethod__Group__0");
					put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
					put(grammarAccess.getRotateRightAccess().getGroup(), "rule__RotateRight__Group__0");
					put(grammarAccess.getRotateLeftAccess().getGroup(), "rule__RotateLeft__Group__0");
					put(grammarAccess.getGreaterThanAccess().getGroup(), "rule__GreaterThan__Group__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getConstantAccess().getGroup_3(), "rule__Constant__Group_3__0");
					put(grammarAccess.getVariableRefAccess().getGroup(), "rule__VariableRef__Group__0");
					put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
					put(grammarAccess.getModuloAccess().getGroup(), "rule__Modulo__Group__0");
					put(grammarAccess.getProgramAccess().getXAssignment_2_1(), "rule__Program__XAssignment_2_1");
					put(grammarAccess.getProgramAccess().getYAssignment_3_1(), "rule__Program__YAssignment_3_1");
					put(grammarAccess.getProgramAccess().getAngleAssignment_4_1(), "rule__Program__AngleAssignment_4_1");
					put(grammarAccess.getProgramAccess().getDistanceAssignment_5_1(), "rule__Program__DistanceAssignment_5_1");
					put(grammarAccess.getProgramAccess().getMainMethodAssignment_7(), "rule__Program__MainMethodAssignment_7");
					put(grammarAccess.getProgramAccess().getMethodsAssignment_8_2(), "rule__Program__MethodsAssignment_8_2");
					put(grammarAccess.getProgramAccess().getMethodsAssignment_8_3_1(), "rule__Program__MethodsAssignment_8_3_1");
					put(grammarAccess.getProgramAccess().getVariablesAssignment_9_2(), "rule__Program__VariablesAssignment_9_2");
					put(grammarAccess.getProgramAccess().getVariablesAssignment_9_3_1(), "rule__Program__VariablesAssignment_9_3_1");
					put(grammarAccess.getProgramAccess().getLinesAssignment_10_2(), "rule__Program__LinesAssignment_10_2");
					put(grammarAccess.getProgramAccess().getLinesAssignment_10_3_1(), "rule__Program__LinesAssignment_10_3_1");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getBlockAssignment_4(), "rule__Method__BlockAssignment_4");
					put(grammarAccess.getVariableAccess().getNameAssignment_2(), "rule__Variable__NameAssignment_2");
					put(grammarAccess.getVariableAccess().getValueAssignment_4_1(), "rule__Variable__ValueAssignment_4_1");
					put(grammarAccess.getLineAccess().getX1Assignment_3_1(), "rule__Line__X1Assignment_3_1");
					put(grammarAccess.getLineAccess().getY1Assignment_4_1(), "rule__Line__Y1Assignment_4_1");
					put(grammarAccess.getLineAccess().getX2Assignment_5_1(), "rule__Line__X2Assignment_5_1");
					put(grammarAccess.getLineAccess().getY2Assignment_6_1(), "rule__Line__Y2Assignment_6_1");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_3_2(), "rule__Block__StatementsAssignment_3_2");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_3_3_1(), "rule__Block__StatementsAssignment_3_3_1");
					put(grammarAccess.getIfStmtAccess().getThenBranchAssignment_3(), "rule__IfStmt__ThenBranchAssignment_3");
					put(grammarAccess.getIfStmtAccess().getElseBranchAssignment_4_1(), "rule__IfStmt__ElseBranchAssignment_4_1");
					put(grammarAccess.getIfStmtAccess().getConditionAssignment_6(), "rule__IfStmt__ConditionAssignment_6");
					put(grammarAccess.getVariableAffectAccess().getVariableAssignment_1(), "rule__VariableAffect__VariableAssignment_1");
					put(grammarAccess.getVariableAffectAccess().getValueAssignment_3(), "rule__VariableAffect__ValueAssignment_3");
					put(grammarAccess.getCallMethodAccess().getMethodAssignment_3(), "rule__CallMethod__MethodAssignment_3");
					put(grammarAccess.getGreaterThanAccess().getLeftAssignment_3(), "rule__GreaterThan__LeftAssignment_3");
					put(grammarAccess.getGreaterThanAccess().getRightAssignment_5(), "rule__GreaterThan__RightAssignment_5");
					put(grammarAccess.getConstantAccess().getValueAssignment_3_1(), "rule__Constant__ValueAssignment_3_1");
					put(grammarAccess.getVariableRefAccess().getVariableAssignment_3(), "rule__VariableRef__VariableAssignment_3");
					put(grammarAccess.getSumAccess().getRightAssignment_2(), "rule__Sum__RightAssignment_2");
					put(grammarAccess.getSumAccess().getLeftAssignment_4(), "rule__Sum__LeftAssignment_4");
					put(grammarAccess.getModuloAccess().getRightAssignment_2(), "rule__Modulo__RightAssignment_2");
					put(grammarAccess.getModuloAccess().getLeftAssignment_4(), "rule__Modulo__LeftAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalMyDslParser typedParser = (InternalMyDslParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
