// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://diverse.inria.fr/minilang" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	'Program'
	'{'
		('x' x=EDouble)?
		('y' y=EDouble)?
		('angle' angle=Cardinals)?
		('distance' distance=EDouble)?
		'mainMethod' mainMethod=[Method|EString]
		('methods' '{' methods+=Method ( "," methods+=Method)* '}' )?
		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
		('lines' '{' lines+=Line ( "," lines+=Line)* '}' )?
	'}';





Statement returns Statement:
	IfStmt | VariableAffect | CallMethod | Move | RotateRight | RotateLeft;

Condition returns Condition:
	GreaterThan;

Value returns Value:
	Constant | VariableRef | Sum | Modulo;

Method returns Method:
	'Method'
	name=EString
	'{'
		'block' block=Block
	'}';

Variable returns Variable:
	{Variable}
	'Variable'
	name=EString
	'{'
		('value' value=EDouble)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum Cardinals returns Cardinals:
				NORTH = 'NORTH' | EAST = 'EAST' | SOUTH = 'SOUTH' | WEST = 'WEST';

Line returns Line:
	{Line}
	'Line'
	'{'
		('x1' x1=EDouble)?
		('y1' y1=EDouble)?
		('x2' x2=EDouble)?
		('y2' y2=EDouble)?
	'}';

EString returns ecore::EString:
	STRING | ID;

Block returns Block:
	{Block}
	'Block'
	'{'
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

IfStmt returns IfStmt:
	'If'
	'{'
		'thenBranch' thenBranch=Block
		('elseBranch' elseBranch=Block)?
		'condition' condition=Condition
	'}';

VariableAffect returns VariableAffect:
	'variable' variable=[Variable|EString] '<-' value=Value;

CallMethod returns CallMethod:
	'CallMethod'
	'{'
		'method' method=[Method|EString]
	'}';

Move returns Move:
	{Move}
	'Move'
	;

RotateRight returns RotateRight:
	{RotateRight}
	'RotateRight'
	;

RotateLeft returns RotateLeft:
	{RotateLeft}
	'RotateLeft'
	;

GreaterThan returns GreaterThan:
	'GreaterThan'
	'{'
		'left' left=Value
		'right' right=Value
	'}';

Constant returns Constant:
	{Constant}
	'Constant'
	'{'
		('value' value=EDouble)?
	'}';

VariableRef returns VariableRef:
	'VariableRef'
	'{'
		'variable' variable=[Variable|EString]
	'}';

Sum returns Sum:
	'+' '(' right=Value ',' left=Value ')';

Modulo returns Modulo:
	'%' '(' right=Value ',' left=Value ')';
