/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cXKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXEDoubleParserRuleCall_2_1_0 = (RuleCall)cXAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cYKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cYAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cYEDoubleParserRuleCall_3_1_0 = (RuleCall)cYAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAngleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAngleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAngleCardinalsEnumRuleCall_4_1_0 = (RuleCall)cAngleAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDistanceKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDistanceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDistanceEDoubleParserRuleCall_5_1_0 = (RuleCall)cDistanceAssignment_5_1.eContents().get(0);
		private final Keyword cMainMethodKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMainMethodAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cMainMethodMethodCrossReference_7_0 = (CrossReference)cMainMethodAssignment_7.eContents().get(0);
		private final RuleCall cMainMethodMethodEStringParserRuleCall_7_0_1 = (RuleCall)cMainMethodMethodCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cMethodsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cMethodsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cMethodsMethodParserRuleCall_8_2_0 = (RuleCall)cMethodsAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cMethodsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cMethodsMethodParserRuleCall_8_3_1_0 = (RuleCall)cMethodsAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cVariablesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cVariablesAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_9_2_0 = (RuleCall)cVariablesAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cVariablesAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_9_3_1_0 = (RuleCall)cVariablesAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLinesKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cLinesAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cLinesLineParserRuleCall_10_2_0 = (RuleCall)cLinesAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cLinesAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cLinesLineParserRuleCall_10_3_1_0 = (RuleCall)cLinesAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Program:
		//	'Program'
		//	'{' ('x' x=EDouble)? ('y' y=EDouble)? ('angle' angle=Cardinals)? ('distance' distance=EDouble)?
		//	'mainMethod' mainMethod=[Method|EString] ('methods' '{' methods+=Method ("," methods+=Method)* '}')? ('variables' '{'
		//	variables+=Variable ("," variables+=Variable)* '}')? ('lines' '{' lines+=Line ("," lines+=Line)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Program' '{' ('x' x=EDouble)? ('y' y=EDouble)? ('angle' angle=Cardinals)? ('distance' distance=EDouble)? 'mainMethod'
		//mainMethod=[Method|EString] ('methods' '{' methods+=Method ("," methods+=Method)* '}')? ('variables' '{'
		//variables+=Variable ("," variables+=Variable)* '}')? ('lines' '{' lines+=Line ("," lines+=Line)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'Program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('x' x=EDouble)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'x'
		public Keyword getXKeyword_2_0() { return cXKeyword_2_0; }
		
		//x=EDouble
		public Assignment getXAssignment_2_1() { return cXAssignment_2_1; }
		
		//EDouble
		public RuleCall getXEDoubleParserRuleCall_2_1_0() { return cXEDoubleParserRuleCall_2_1_0; }
		
		//('y' y=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'y'
		public Keyword getYKeyword_3_0() { return cYKeyword_3_0; }
		
		//y=EDouble
		public Assignment getYAssignment_3_1() { return cYAssignment_3_1; }
		
		//EDouble
		public RuleCall getYEDoubleParserRuleCall_3_1_0() { return cYEDoubleParserRuleCall_3_1_0; }
		
		//('angle' angle=Cardinals)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'angle'
		public Keyword getAngleKeyword_4_0() { return cAngleKeyword_4_0; }
		
		//angle=Cardinals
		public Assignment getAngleAssignment_4_1() { return cAngleAssignment_4_1; }
		
		//Cardinals
		public RuleCall getAngleCardinalsEnumRuleCall_4_1_0() { return cAngleCardinalsEnumRuleCall_4_1_0; }
		
		//('distance' distance=EDouble)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'distance'
		public Keyword getDistanceKeyword_5_0() { return cDistanceKeyword_5_0; }
		
		//distance=EDouble
		public Assignment getDistanceAssignment_5_1() { return cDistanceAssignment_5_1; }
		
		//EDouble
		public RuleCall getDistanceEDoubleParserRuleCall_5_1_0() { return cDistanceEDoubleParserRuleCall_5_1_0; }
		
		//'mainMethod'
		public Keyword getMainMethodKeyword_6() { return cMainMethodKeyword_6; }
		
		//mainMethod=[Method|EString]
		public Assignment getMainMethodAssignment_7() { return cMainMethodAssignment_7; }
		
		//[Method|EString]
		public CrossReference getMainMethodMethodCrossReference_7_0() { return cMainMethodMethodCrossReference_7_0; }
		
		//EString
		public RuleCall getMainMethodMethodEStringParserRuleCall_7_0_1() { return cMainMethodMethodEStringParserRuleCall_7_0_1; }
		
		//('methods' '{' methods+=Method ("," methods+=Method)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'methods'
		public Keyword getMethodsKeyword_8_0() { return cMethodsKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//methods+=Method
		public Assignment getMethodsAssignment_8_2() { return cMethodsAssignment_8_2; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_8_2_0() { return cMethodsMethodParserRuleCall_8_2_0; }
		
		//("," methods+=Method)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//methods+=Method
		public Assignment getMethodsAssignment_8_3_1() { return cMethodsAssignment_8_3_1; }
		
		//Method
		public RuleCall getMethodsMethodParserRuleCall_8_3_1_0() { return cMethodsMethodParserRuleCall_8_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
		
		//('variables' '{' variables+=Variable ("," variables+=Variable)* '}')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'variables'
		public Keyword getVariablesKeyword_9_0() { return cVariablesKeyword_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_9_2() { return cVariablesAssignment_9_2; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_9_2_0() { return cVariablesVariableParserRuleCall_9_2_0; }
		
		//("," variables+=Variable)*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_9_3_1() { return cVariablesAssignment_9_3_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_9_3_1_0() { return cVariablesVariableParserRuleCall_9_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }
		
		//('lines' '{' lines+=Line ("," lines+=Line)* '}')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'lines'
		public Keyword getLinesKeyword_10_0() { return cLinesKeyword_10_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }
		
		//lines+=Line
		public Assignment getLinesAssignment_10_2() { return cLinesAssignment_10_2; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_10_2_0() { return cLinesLineParserRuleCall_10_2_0; }
		
		//("," lines+=Line)*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }
		
		//lines+=Line
		public Assignment getLinesAssignment_10_3_1() { return cLinesAssignment_10_3_1; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_10_3_1_0() { return cLinesLineParserRuleCall_10_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableAffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCallMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMoveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRotateRightParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRotateLeftParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Statement:
		//	IfStmt | VariableAffect | CallMethod | Move | RotateRight | RotateLeft;
		@Override public ParserRule getRule() { return rule; }
		
		//IfStmt | VariableAffect | CallMethod | Move | RotateRight | RotateLeft
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_0() { return cIfStmtParserRuleCall_0; }
		
		//VariableAffect
		public RuleCall getVariableAffectParserRuleCall_1() { return cVariableAffectParserRuleCall_1; }
		
		//CallMethod
		public RuleCall getCallMethodParserRuleCall_2() { return cCallMethodParserRuleCall_2; }
		
		//Move
		public RuleCall getMoveParserRuleCall_3() { return cMoveParserRuleCall_3; }
		
		//RotateRight
		public RuleCall getRotateRightParserRuleCall_4() { return cRotateRightParserRuleCall_4; }
		
		//RotateLeft
		public RuleCall getRotateLeftParserRuleCall_5() { return cRotateLeftParserRuleCall_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final RuleCall cGreaterThanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	GreaterThan;
		@Override public ParserRule getRule() { return rule; }
		
		//GreaterThan
		public RuleCall getGreaterThanParserRuleCall() { return cGreaterThanParserRuleCall; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cModuloParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//	Constant | VariableRef | Sum | Modulo;
		@Override public ParserRule getRule() { return rule; }
		
		//Constant | VariableRef | Sum | Modulo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_1() { return cVariableRefParserRuleCall_1; }
		
		//Sum
		public RuleCall getSumParserRuleCall_2() { return cSumParserRuleCall_2; }
		
		//Modulo
		public RuleCall getModuloParserRuleCall_3() { return cModuloParserRuleCall_3; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBlockKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Method:
		//	'Method'
		//	name=EString
		//	'{'
		//	'block' block=Block
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Method' name=EString '{' 'block' block=Block '}'
		public Group getGroup() { return cGroup; }
		
		//'Method'
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'block'
		public Keyword getBlockKeyword_3() { return cBlockKeyword_3; }
		
		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Variable:
		//	{Variable}
		//	'Variable'
		//	name=EString
		//	'{' ('value' value=EDouble)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} 'Variable' name=EString '{' ('value' value=EDouble)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//'Variable'
		public Keyword getVariableKeyword_1() { return cVariableKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('value' value=EDouble)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'value'
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_4_1_0() { return cValueEDoubleParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble ecore::EDouble:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cX1Keyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cX1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cX1EDoubleParserRuleCall_3_1_0 = (RuleCall)cX1Assignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cY1Keyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cY1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cY1EDoubleParserRuleCall_4_1_0 = (RuleCall)cY1Assignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cX2Keyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cX2Assignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cX2EDoubleParserRuleCall_5_1_0 = (RuleCall)cX2Assignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cY2Keyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cY2Assignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cY2EDoubleParserRuleCall_6_1_0 = (RuleCall)cY2Assignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Line:
		//	{Line}
		//	'Line'
		//	'{' ('x1' x1=EDouble)? ('y1' y1=EDouble)? ('x2' x2=EDouble)? ('y2' y2=EDouble)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Line} 'Line' '{' ('x1' x1=EDouble)? ('y1' y1=EDouble)? ('x2' x2=EDouble)? ('y2' y2=EDouble)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Line}
		public Action getLineAction_0() { return cLineAction_0; }
		
		//'Line'
		public Keyword getLineKeyword_1() { return cLineKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('x1' x1=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'x1'
		public Keyword getX1Keyword_3_0() { return cX1Keyword_3_0; }
		
		//x1=EDouble
		public Assignment getX1Assignment_3_1() { return cX1Assignment_3_1; }
		
		//EDouble
		public RuleCall getX1EDoubleParserRuleCall_3_1_0() { return cX1EDoubleParserRuleCall_3_1_0; }
		
		//('y1' y1=EDouble)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'y1'
		public Keyword getY1Keyword_4_0() { return cY1Keyword_4_0; }
		
		//y1=EDouble
		public Assignment getY1Assignment_4_1() { return cY1Assignment_4_1; }
		
		//EDouble
		public RuleCall getY1EDoubleParserRuleCall_4_1_0() { return cY1EDoubleParserRuleCall_4_1_0; }
		
		//('x2' x2=EDouble)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'x2'
		public Keyword getX2Keyword_5_0() { return cX2Keyword_5_0; }
		
		//x2=EDouble
		public Assignment getX2Assignment_5_1() { return cX2Assignment_5_1; }
		
		//EDouble
		public RuleCall getX2EDoubleParserRuleCall_5_1_0() { return cX2EDoubleParserRuleCall_5_1_0; }
		
		//('y2' y2=EDouble)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'y2'
		public Keyword getY2Keyword_6_0() { return cY2Keyword_6_0; }
		
		//y2=EDouble
		public Assignment getY2Assignment_6_1() { return cY2Assignment_6_1; }
		
		//EDouble
		public RuleCall getY2EDoubleParserRuleCall_6_1_0() { return cY2EDoubleParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStatementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStatementsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_3_2_0 = (RuleCall)cStatementsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_3_3_1_0 = (RuleCall)cStatementsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block:
		//	{Block}
		//	'Block'
		//	'{' ('statements' '{' statements+=Statement ("," statements+=Statement)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} 'Block' '{' ('statements' '{' statements+=Statement ("," statements+=Statement)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'Block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('statements' '{' statements+=Statement ("," statements+=Statement)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'statements'
		public Keyword getStatementsKeyword_3_0() { return cStatementsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_3_2() { return cStatementsAssignment_3_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_2_0() { return cStatementsStatementParserRuleCall_3_2_0; }
		
		//("," statements+=Statement)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_3_3_1() { return cStatementsAssignment_3_3_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_3_1_0() { return cStatementsStatementParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cThenBranchKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenBranchAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenBranchBlockParserRuleCall_3_0 = (RuleCall)cThenBranchAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseBranchKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseBranchAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseBranchBlockParserRuleCall_4_1_0 = (RuleCall)cElseBranchAssignment_4_1.eContents().get(0);
		private final Keyword cConditionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionConditionParserRuleCall_6_0 = (RuleCall)cConditionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfStmt:
		//	'If'
		//	'{'
		//	'thenBranch' thenBranch=Block ('elseBranch' elseBranch=Block)?
		//	'condition' condition=Condition
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'If' '{' 'thenBranch' thenBranch=Block ('elseBranch' elseBranch=Block)? 'condition' condition=Condition '}'
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'thenBranch'
		public Keyword getThenBranchKeyword_2() { return cThenBranchKeyword_2; }
		
		//thenBranch=Block
		public Assignment getThenBranchAssignment_3() { return cThenBranchAssignment_3; }
		
		//Block
		public RuleCall getThenBranchBlockParserRuleCall_3_0() { return cThenBranchBlockParserRuleCall_3_0; }
		
		//('elseBranch' elseBranch=Block)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'elseBranch'
		public Keyword getElseBranchKeyword_4_0() { return cElseBranchKeyword_4_0; }
		
		//elseBranch=Block
		public Assignment getElseBranchAssignment_4_1() { return cElseBranchAssignment_4_1; }
		
		//Block
		public RuleCall getElseBranchBlockParserRuleCall_4_1_0() { return cElseBranchBlockParserRuleCall_4_1_0; }
		
		//'condition'
		public Keyword getConditionKeyword_5() { return cConditionKeyword_5; }
		
		//condition=Condition
		public Assignment getConditionAssignment_6() { return cConditionAssignment_6; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_6_0() { return cConditionConditionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class VariableAffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableAffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_1_0_1 = (RuleCall)cVariableVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableAffect:
		//	'variable' variable=[Variable|EString] '<-' value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable' variable=[Variable|EString] '<-' value=Value
		public Group getGroup() { return cGroup; }
		
		//'variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_1_0() { return cVariableVariableCrossReference_1_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_1_0_1() { return cVariableVariableEStringParserRuleCall_1_0_1; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_2() { return cLessThanSignHyphenMinusKeyword_2; }
		
		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
	}
	public class CallMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CallMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMethodKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMethodMethodCrossReference_3_0 = (CrossReference)cMethodAssignment_3.eContents().get(0);
		private final RuleCall cMethodMethodEStringParserRuleCall_3_0_1 = (RuleCall)cMethodMethodCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CallMethod:
		//	'CallMethod'
		//	'{'
		//	'method' method=[Method|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CallMethod' '{' 'method' method=[Method|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'CallMethod'
		public Keyword getCallMethodKeyword_0() { return cCallMethodKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'method'
		public Keyword getMethodKeyword_2() { return cMethodKeyword_2; }
		
		//method=[Method|EString]
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }
		
		//[Method|EString]
		public CrossReference getMethodMethodCrossReference_3_0() { return cMethodMethodCrossReference_3_0; }
		
		//EString
		public RuleCall getMethodMethodEStringParserRuleCall_3_0_1() { return cMethodMethodEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMoveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Move:
		//	{Move}
		//	'Move';
		@Override public ParserRule getRule() { return rule; }
		
		//{Move} 'Move'
		public Group getGroup() { return cGroup; }
		
		//{Move}
		public Action getMoveAction_0() { return cMoveAction_0; }
		
		//'Move'
		public Keyword getMoveKeyword_1() { return cMoveKeyword_1; }
	}
	public class RotateRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RotateRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotateRightAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRotateRightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RotateRight:
		//	{RotateRight}
		//	'RotateRight';
		@Override public ParserRule getRule() { return rule; }
		
		//{RotateRight} 'RotateRight'
		public Group getGroup() { return cGroup; }
		
		//{RotateRight}
		public Action getRotateRightAction_0() { return cRotateRightAction_0; }
		
		//'RotateRight'
		public Keyword getRotateRightKeyword_1() { return cRotateRightKeyword_1; }
	}
	public class RotateLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RotateLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotateLeftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRotateLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RotateLeft:
		//	{RotateLeft}
		//	'RotateLeft';
		@Override public ParserRule getRule() { return rule; }
		
		//{RotateLeft} 'RotateLeft'
		public Group getGroup() { return cGroup; }
		
		//{RotateLeft}
		public Action getRotateLeftAction_0() { return cRotateLeftAction_0; }
		
		//'RotateLeft'
		public Keyword getRotateLeftKeyword_1() { return cRotateLeftKeyword_1; }
	}
	public class GreaterThanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GreaterThan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftValueParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Keyword cRightKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightValueParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GreaterThan:
		//	'GreaterThan'
		//	'{'
		//	'left' left=Value
		//	'right' right=Value
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'GreaterThan' '{' 'left' left=Value 'right' right=Value '}'
		public Group getGroup() { return cGroup; }
		
		//'GreaterThan'
		public Keyword getGreaterThanKeyword_0() { return cGreaterThanKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'left'
		public Keyword getLeftKeyword_2() { return cLeftKeyword_2; }
		
		//left=Value
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//Value
		public RuleCall getLeftValueParserRuleCall_3_0() { return cLeftValueParserRuleCall_3_0; }
		
		//'right'
		public Keyword getRightKeyword_4() { return cRightKeyword_4; }
		
		//right=Value
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//Value
		public RuleCall getRightValueParserRuleCall_5_0() { return cRightValueParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant:
		//	{Constant}
		//	'Constant'
		//	'{' ('value' value=EDouble)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant} 'Constant' '{' ('value' value=EDouble)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//'Constant'
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_3_1_0() { return cValueEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVariableKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariableVariableCrossReference_3_0 = (CrossReference)cVariableAssignment_3.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_3_0_1 = (RuleCall)cVariableVariableCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariableRef:
		//	'VariableRef'
		//	'{'
		//	'variable' variable=[Variable|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'VariableRef' '{' 'variable' variable=[Variable|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'VariableRef'
		public Keyword getVariableRefKeyword_0() { return cVariableRefKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'variable'
		public Keyword getVariableKeyword_2() { return cVariableKeyword_2; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_3_0() { return cVariableVariableCrossReference_3_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_3_0_1() { return cVariableVariableEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftValueParserRuleCall_4_0 = (RuleCall)cLeftAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sum:
		//	'+' '(' right=Value ',' left=Value ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' '(' right=Value ',' left=Value ')'
		public Group getGroup() { return cGroup; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//right=Value
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Value
		public RuleCall getRightValueParserRuleCall_2_0() { return cRightValueParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//left=Value
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }
		
		//Value
		public RuleCall getLeftValueParserRuleCall_4_0() { return cLeftValueParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftValueParserRuleCall_4_0 = (RuleCall)cLeftAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Modulo:
		//	'%' '(' right=Value ',' left=Value ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'%' '(' right=Value ',' left=Value ')'
		public Group getGroup() { return cGroup; }
		
		//'%'
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//right=Value
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Value
		public RuleCall getRightValueParserRuleCall_2_0() { return cRightValueParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//left=Value
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }
		
		//Value
		public RuleCall getLeftValueParserRuleCall_4_0() { return cLeftValueParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	public class CardinalsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Cardinals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORTHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORTHNORTHKeyword_0_0 = (Keyword)cNORTHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEASTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEASTEASTKeyword_1_0 = (Keyword)cEASTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSOUTHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSOUTHSOUTHKeyword_2_0 = (Keyword)cSOUTHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWESTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWESTWESTKeyword_3_0 = (Keyword)cWESTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Cardinals:
		//	NORTH | EAST | SOUTH | WEST;
		public EnumRule getRule() { return rule; }
		
		//NORTH | EAST | SOUTH | WEST
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NORTH
		public EnumLiteralDeclaration getNORTHEnumLiteralDeclaration_0() { return cNORTHEnumLiteralDeclaration_0; }
		
		//'NORTH'
		public Keyword getNORTHNORTHKeyword_0_0() { return cNORTHNORTHKeyword_0_0; }
		
		//EAST
		public EnumLiteralDeclaration getEASTEnumLiteralDeclaration_1() { return cEASTEnumLiteralDeclaration_1; }
		
		//'EAST'
		public Keyword getEASTEASTKeyword_1_0() { return cEASTEASTKeyword_1_0; }
		
		//SOUTH
		public EnumLiteralDeclaration getSOUTHEnumLiteralDeclaration_2() { return cSOUTHEnumLiteralDeclaration_2; }
		
		//'SOUTH'
		public Keyword getSOUTHSOUTHKeyword_2_0() { return cSOUTHSOUTHKeyword_2_0; }
		
		//WEST
		public EnumLiteralDeclaration getWESTEnumLiteralDeclaration_3() { return cWESTEnumLiteralDeclaration_3; }
		
		//'WEST'
		public Keyword getWESTWESTKeyword_3_0() { return cWESTWESTKeyword_3_0; }
	}
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final ConditionElements pCondition;
	private final ValueElements pValue;
	private final MethodElements pMethod;
	private final VariableElements pVariable;
	private final EDoubleElements pEDouble;
	private final CardinalsElements eCardinals;
	private final LineElements pLine;
	private final EStringElements pEString;
	private final BlockElements pBlock;
	private final IfStmtElements pIfStmt;
	private final VariableAffectElements pVariableAffect;
	private final CallMethodElements pCallMethod;
	private final MoveElements pMove;
	private final RotateRightElements pRotateRight;
	private final RotateLeftElements pRotateLeft;
	private final GreaterThanElements pGreaterThan;
	private final ConstantElements pConstant;
	private final VariableRefElements pVariableRef;
	private final SumElements pSum;
	private final ModuloElements pModulo;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pCondition = new ConditionElements();
		this.pValue = new ValueElements();
		this.pMethod = new MethodElements();
		this.pVariable = new VariableElements();
		this.pEDouble = new EDoubleElements();
		this.eCardinals = new CardinalsElements();
		this.pLine = new LineElements();
		this.pEString = new EStringElements();
		this.pBlock = new BlockElements();
		this.pIfStmt = new IfStmtElements();
		this.pVariableAffect = new VariableAffectElements();
		this.pCallMethod = new CallMethodElements();
		this.pMove = new MoveElements();
		this.pRotateRight = new RotateRightElements();
		this.pRotateLeft = new RotateLeftElements();
		this.pGreaterThan = new GreaterThanElements();
		this.pConstant = new ConstantElements();
		this.pVariableRef = new VariableRefElements();
		this.pSum = new SumElements();
		this.pModulo = new ModuloElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	'Program'
	//	'{' ('x' x=EDouble)? ('y' y=EDouble)? ('angle' angle=Cardinals)? ('distance' distance=EDouble)?
	//	'mainMethod' mainMethod=[Method|EString] ('methods' '{' methods+=Method ("," methods+=Method)* '}')? ('variables' '{'
	//	variables+=Variable ("," variables+=Variable)* '}')? ('lines' '{' lines+=Line ("," lines+=Line)* '}')?
	//	'}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement:
	//	IfStmt | VariableAffect | CallMethod | Move | RotateRight | RotateLeft;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Condition:
	//	GreaterThan;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Value:
	//	Constant | VariableRef | Sum | Modulo;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Method:
	//	'Method'
	//	name=EString
	//	'{'
	//	'block' block=Block
	//	'}';
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Variable:
	//	{Variable}
	//	'Variable'
	//	name=EString
	//	'{' ('value' value=EDouble)?
	//	'}';
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//enum Cardinals:
	//	NORTH | EAST | SOUTH | WEST;
	public CardinalsElements getCardinalsAccess() {
		return eCardinals;
	}
	
	public EnumRule getCardinalsRule() {
		return getCardinalsAccess().getRule();
	}
	
	//Line:
	//	{Line}
	//	'Line'
	//	'{' ('x1' x1=EDouble)? ('y1' y1=EDouble)? ('x2' x2=EDouble)? ('y2' y2=EDouble)?
	//	'}';
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Block:
	//	{Block}
	//	'Block'
	//	'{' ('statements' '{' statements+=Statement ("," statements+=Statement)* '}')?
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//IfStmt:
	//	'If'
	//	'{'
	//	'thenBranch' thenBranch=Block ('elseBranch' elseBranch=Block)?
	//	'condition' condition=Condition
	//	'}';
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//VariableAffect:
	//	'variable' variable=[Variable|EString] '<-' value=Value;
	public VariableAffectElements getVariableAffectAccess() {
		return pVariableAffect;
	}
	
	public ParserRule getVariableAffectRule() {
		return getVariableAffectAccess().getRule();
	}
	
	//CallMethod:
	//	'CallMethod'
	//	'{'
	//	'method' method=[Method|EString]
	//	'}';
	public CallMethodElements getCallMethodAccess() {
		return pCallMethod;
	}
	
	public ParserRule getCallMethodRule() {
		return getCallMethodAccess().getRule();
	}
	
	//Move:
	//	{Move}
	//	'Move';
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//RotateRight:
	//	{RotateRight}
	//	'RotateRight';
	public RotateRightElements getRotateRightAccess() {
		return pRotateRight;
	}
	
	public ParserRule getRotateRightRule() {
		return getRotateRightAccess().getRule();
	}
	
	//RotateLeft:
	//	{RotateLeft}
	//	'RotateLeft';
	public RotateLeftElements getRotateLeftAccess() {
		return pRotateLeft;
	}
	
	public ParserRule getRotateLeftRule() {
		return getRotateLeftAccess().getRule();
	}
	
	//GreaterThan:
	//	'GreaterThan'
	//	'{'
	//	'left' left=Value
	//	'right' right=Value
	//	'}';
	public GreaterThanElements getGreaterThanAccess() {
		return pGreaterThan;
	}
	
	public ParserRule getGreaterThanRule() {
		return getGreaterThanAccess().getRule();
	}
	
	//Constant:
	//	{Constant}
	//	'Constant'
	//	'{' ('value' value=EDouble)?
	//	'}';
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//VariableRef:
	//	'VariableRef'
	//	'{'
	//	'variable' variable=[Variable|EString]
	//	'}';
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//Sum:
	//	'+' '(' right=Value ',' left=Value ')';
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}
	
	//Modulo:
	//	'%' '(' right=Value ',' left=Value ')';
	public ModuloElements getModuloAccess() {
		return pModulo;
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
